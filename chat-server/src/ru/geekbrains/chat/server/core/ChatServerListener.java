package ru.geekbrains.chat.server.core;

public interface ChatServerListener {
    void onChatServerMessage(String msg);
}
/*
Какие библиотеки в соверменных проектах нужно знать на данный момент? Сейчас почти все вакансии требуют rxjava или корутины. Есть ли у вас список таких библиотек или паттернов которые вы бы могли порекомендовать к изучению?

   SwingUtilities.invokeLater(new Runnable() {
        @Override
        public void run() {
            log.append(msg + "\n");
log.setCaretPosition(log.getDocument().getLength());
        }
    });
}

1) данным кодом мы просто помещаем в очередь какое-то действие, а edt сам разбирается, когда выполнить наше действие и все в рамках основного edt потока?
Соответственно, любое действие с интерфейсом пользователя надо именно
так реализовывать?
2) зачем в ServerGUI строка log.setCaretPosition(log.getDocument().getLength()); - удаляя строку ничего не изменяется. На предыдущей строке append добавляет в любом случае
в конец.
3) Когда можно использовать static методы? Например, у меня есть класс Config в который я читаю из json параметры. Файл конфиг нужен в нескольких классах приложения. Чтобы не создавать класс Config в каждом классе, можно ли один раз считать файл и записать в статическую переменную и потом всегда работать с ней? И можно ли тогда вообще оставить работу с классом Config только со статическими методами не создавая объекта класса?

1) Коллекции и БД, как я понял оптимальней всего использовать БД, а для чего тогда нужны коллекции, точнее область их применения? Логично предположить, что когда нет нужды в БД. Как в принципе определять когда лучше использовать коллекции, а когда БД?
Следующий вопрос можно не включать в пулл вопросов:
2) А есть какая-нибудь методология по чтению кода? Или это просто само приходит со временем? (сам используя блокнот и ручку записывал ключевые элементы поэтапно начиная с мейна проходя по строчкам кода). На Хабре наткнулся на статью о том что один из вариантов улучшение написания кода (кроме собственно самой практики написания), это чтение и разбор другого кода более опытного программиста. Можете посоветовать что-нибудь с открытым кодом для изучения? Или какой-нибудь Ваш код не представляющий коммерческой/военной тайны?)

1)На уроке про интерфейсы из примера я понял что: класс наследует абстрактный класс, а абстрактный класс наследует интерфейс. Также на уроках про чат по коду видно что абстрактный класс в этой связке не совсем то и нужен. Создается впечатление что им нужно пользоваться в крайне редких случаях. Отсюда возникает вопрос, Для чего нужны абстрактные классы? В каких случаях без них ни как не обойтись?

1.Хотелось бы уточнить, что есть за класс такой vector? Что вы иммели ввиду под он многотопочный?) так вы на занятии выразились. Не очень могу себе представить, как список может быть многопоточным ну или однопоточным..список это просто список (во всяком случае я так понимаю и как по мне к потокам это по идее не должно иметь никакого отношения) или это список который можно собрать с нескольких потоков?, если это так, получается стандартный arraylist нельзя с нескольких потоков создавать?
2. Я конечно помню, что вы говорили особо пока не вникать в sql, но все же спрошу, когда мы возвращали значение логин/пароль из бд мы использовали индекс '1' - это индекс столбца или строки?

вопросы возникают только по теме того как до всего додуматься

1) В ChatServer'e в методе onSocketReady мы добавляем в вектор треды клиентов clients.add(thread),
Это происходит до авторизации, а потом для прохождения авторизации мы накручиваем на него же КлиентТред тоесть добавляем поля никнэйм, и isAuthorized и в зависимости от прохождения аворизации заполняем эти поля соответсвенно. И после этого у нас в векторе клиентТред уже авторизованый хранится, тоесть с заполниными полями, правильно я понимаю или нет?
2)В ClientGUI в методе onSocketReady мы создаём две строковые переменные и присваиваем им значения текстовых полей. Почему в одном случае мы делаем это через оператора new String а в другом нет, потому что методом getPassword() возвращается не строковое значение?
String login = tfLogin.getText();
String password = new String(tfPassword.getPassword());

* */